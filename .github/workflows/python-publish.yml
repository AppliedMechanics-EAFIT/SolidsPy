name: SolidsPy CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop_v2.0
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.3
  pull_request:
    branches:
      - main
      - develop_v2.0

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest --cov=solidspy tests/

      - name: Generate coverage report
        run: |
          coverage xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml

  build-and-publish:
    name: Build and Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        run: python -m build

      - name: Publish package to TestPyPI
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/* --verbose

  build-and-publish-conda:
    name: Build and Publish Conda Package
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: '3.10'
          channels: conda-forge

      - name: Install conda-build and anaconda-client via conda
        run: |
          conda install -y conda-build anaconda-client
          conda list anaconda-client

      - name: Locate anaconda executable
        run: |
          which anaconda || echo "anaconda not found"

      - name: Add Conda bin to PATH
        run: echo "$HOME/miniconda/bin" >> $GITHUB_PATH

      - name: Install anaconda-client via pip (if not found via conda)
        run: |
          pip install --upgrade pip
          pip install anaconda-client

      - name: Verify anaconda-client installation
        run: which anaconda

      - name: Build Conda package
        run: conda build conda-recipe --output-folder dist -c conda-forge

      - name: Upload Conda package
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
          ANACONDA_USERNAME: ${{ secrets.ANACONDA_USERNAME }}
        run: |
          export ANACONDA_API_TOKEN=${{ secrets.ANACONDA_API_TOKEN }}
          for pkg in dist/*/*.tar.bz2; do
            anaconda upload "$pkg" --user "$ANACONDA_USERNAME" --force
          done
